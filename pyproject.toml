[tool.poetry]
name = "wg-scripts"
version = "1.0.1"
description = ""
authors = ["Will Garside <worgarside@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
wg-utilities = { extras = [
  "devices.dht22",
  "exceptions",
  "logging",
  "mqtt",
], version = "^5.7.0" }
psutil = "*"
pigpio = "*"
dot3k = { version = "*", platform = "linux" }
rpi-gpio = { version = "*", platform = "linux", optional = true }

# Tool Configs

[tool.mypy]
check_untyped_defs = true
mypy_path = "src"

disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true

explicit_package_bases = true

ignore_missing_imports = false

no_implicit_optional = true
no_implicit_reexport = true

show_column_numbers = true
show_error_codes = true
show_error_context = true

strict = true
strict_equality = true
strict_optional = true

warn_return_any = true
warn_unused_ignores = true
warn_unused_configs = true
warn_redundant_casts = true
warn_no_return = true
warn_unreachable = true

enable_error_code = [
  "arg-type",           # Checks for argument types in function calls.
  "assignment",         # Validates types of variable assignments.
  "return-value",       # Ensures that return values match the declared type.
  "call-overload",      # Validates correct use of method/function overloads.
  "operator",           # Checks operator usage against expected types.
  "index",              # Validates types used in indexing operations.
  "attr-defined",       # Checks if attributes exist in classes/objects.
  "no-untyped-call",    # Prevents calls to untyped functions in typed contexts.
  "unreachable",        # Warns about code that can never be executed.
  "truthy-bool",        # Ensures that boolean expressions are boolean in type.
  "union-attr",         # Checks for attribute access in unions safely.
  "dict-item",          # Checks for proper types used in dictionary items.
  "unused-awaitable",   # Warns if an awaitable is not awaited.
  "override",           # Ensures overridden methods match the signature in base class.
  "list-item",          # Checks type consistency of list items.
  "return",             # Ensures all code paths in a function return a value if needed.
  "type-var",           # Ensures type variables are used correctly.
  "valid-type",         # Validates types used in annotations are recognized.
  "func-returns-value", # Ensures functions declared with a return type actually return a value.
]

[tool.codespell]
skip = '*.json,*.csv,*.xml,*.txt,*.lock'

[tool.ruff]
fix = true
line-length = 90
lint.select = ["ALL"]
lint.ignore = [
  "ANN101", # https://docs.astral.sh/ruff/rules/missing-type-function-argument/
  "D107",   # https://docs.astral.sh/ruff/rules/undocumented-public-init/
  "S314",   # https://docs.astral.sh/ruff/rules/suspicious-xml-element-tree-usage/
  "TRY003", # https://docs.astral.sh/ruff/rules/raise-vanilla-args/
  "ISC001", # https://docs.astral.sh/ruff/rules/single-line-implicit-string-concatenation/
  "INP001", # https://docs.astral.sh/ruff/rules/implicit-namespace-package/
  "EM",     # https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
  "ANN",    # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
  "BLE",    # https://docs.astral.sh/ruff/rules/blind-except/
  "TID252", # https://docs.astral.sh/ruff/rules/relative-imports/
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]
"tests/**/*.py" = [
  "D101",    # https://docs.astral.sh/ruff/rules/undocumented-public-class/
  "FBT001",  # https://docs.astral.sh/ruff/rules/boolean-type-hint-positional-argument/
  "FBT002",  # https://docs.astral.sh/ruff/rules/boolean-default-value-positional-argument/
  "PT011",   # https://docs.astral.sh/ruff/rules/pytest-raises-too-broad/
  "PLR0124", # https://docs.astral.sh/ruff/rules/comparison-with-itself/
  "PLR0133", # https://docs.astral.sh/ruff/rules/comparison-of-constant/
  "PLR2004", # https://docs.astral.sh/ruff/settings/#pylint-allow-magic-value-types
  "S101",    # https://docs.astral.sh/ruff/rules/assert/
  "S105",    # https://docs.astral.sh/ruff/rules/hardcoded-password-string/
  "S106",    # https://docs.astral.sh/ruff/rules/hardcoded-password-func-arg/
  "S113",    # https://docs.astral.sh/ruff/rules/request-without-timeout/
  "S311",    # https://docs.astral.sh/ruff/rules/suspicious-non-cryptographic-random-usage/
  "S324",    # https://docs.astral.sh/ruff/rules/hashlib-insecure-hash-function/
]
"tests/unit/helpers/mixin/test__instance_cache_mixin.py" = ["N803"]

[tool.ruff.lint.pycodestyle]
max-line-length = 115

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 10

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"
