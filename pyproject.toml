[tool.poetry]
name = "wg-scripts"
version = "0.3.0"
description = ""
authors = ["Will Garside <worgarside@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
python-dotenv = "^1.0.0"
wg-utilities = { extras = [
  "devices.dht22",
  "exceptions",
  "functions",
  "logging",
], version = "^5.7.0" }
paho-mqtt = "*"
psutil = "*"
pigpio = "*"
dot3k = { version = "*", platform = "linux" }
rpi-gpio = { version = "*", platform = "linux" }

[tool.poetry.group.dev.dependencies]
pylint = "<4.0.0"
pre-commit = "^3.6.0"

# Tool Configs

[tool.black]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | Pipfile\.lock
)/
'''

[tool.isort]
add_imports = ["from __future__ import annotations"]
profile = "black"

[tool.mypy]
follow_imports = "normal"
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true

warn_return_any = true
warn_unused_ignores = true
warn_unused_configs = true
warn_redundant_casts = true

no_implicit_optional = true
strict_optional = true

strict_equality = true
show_error_codes = true

[tool.codespell]
skip = '*.json,*.csv,*.xml,*.txt,*.lock'

[tool.pycln]
path = "*"
expand_stars = true
all = true
no_gitignore = false

[tool.ruff]
line-length = 120
select = [
  # https://github.com/astral-sh/ruff#supported-rules
  "A",   # https://beta.ruff.rs/docs/rules/#flake8-builtins-a
  "ARG", # https://beta.ruff.rs/docs/rules/#flake8-unused-arguments-arg
  "B",   # https://beta.ruff.rs/docs/rules/#flake8-bugbear-b
  "C4",  # https://beta.ruff.rs/docs/rules/#flake8-comprehensions-c4
  "COM", # https://beta.ruff.rs/docs/rules/#flake8-commas-com
  "D",   # https://beta.ruff.rs/docs/rules/#pydocstyle-d
  "E",   # https://beta.ruff.rs/docs/rules/#error-e
  "ERA", # https://beta.ruff.rs/docs/rules/#eradicate-era
  "F",   # https://beta.ruff.rs/docs/rules/#pyflakes-f
  "FA",  # https://beta.ruff.rs/docs/rules/#flake8-future-annotations-fa
  "FBT", # https://beta.ruff.rs/docs/rules/#flake8-boolean-trap-fbt
  "G",   # https://beta.ruff.rs/docs/rules/#flake8-logging-format-g
  "I",   # https://beta.ruff.rs/docs/rules/#isort-i
  "ICN", # https://beta.ruff.rs/docs/rules/#flake8-import-conventions-icn
  "N",   # https://beta.ruff.rs/docs/rules/#pep8-naming-n
  "PGH", # https://beta.ruff.rs/docs/rules/#pygrep-hooks-pgh
  "PIE", # https://beta.ruff.rs/docs/rules/#flake8-pie-pie
  "PL",  # https://beta.ruff.rs/docs/rules/#pylint-pl
  "PT",  # https://beta.ruff.rs/docs/rules/#flake8-pytest-style-pt
  "PTH", # https://beta.ruff.rs/docs/rules/#flake8-use-pathlib-pth
  "Q",   # https://beta.ruff.rs/docs/rules/#flake8-quotes-q
  "RET", # https://beta.ruff.rs/docs/rules/#flake8-return-ret
  "RSE", # https://beta.ruff.rs/docs/rules/#flake8-raise-rse
  "RUF", # https://beta.ruff.rs/docs/rules/#ruff-specific-rules-ruf
  "S",   # https://beta.ruff.rs/docs/rules/#flake8-bandit-s
  "SIM", # https://beta.ruff.rs/docs/rules/#flake8-simplify-sim
  "TRY", # https://beta.ruff.rs/docs/rules/#tryceratops-try
  "UP",  # https://beta.ruff.rs/docs/rules/#pyupgrade-up
  "W",   # https://beta.ruff.rs/docs/rules/#warning-w
]
ignore = [
  "COM812", # https://beta.ruff.rs/docs/rules/missing-trailing-comma/
  "D107",   # https://beta.ruff.rs/docs/rules/undocumented-public-init/
  "D202",   # https://beta.ruff.rs/docs/rules/no-blank-line-after-function/
  "S314",   # https://beta.ruff.rs/docs/rules/suspicious-xml-element-tree-usage/
  "TRY003", # https://beta.ruff.rs/docs/rules/raise-vanilla-args/
]


[tool.ruff.per-file-ignores]
"__init__.py" = ["D104"]
"tests/**/*.py" = [
  "FBT001",  # https://beta.ruff.rs/docs/rules/boolean-type-hint-positional-argument/
  "FBT002",  # https://beta.ruff.rs/docs/rules/boolean-default-value-positional-argument/
  "PT011",   # https://beta.ruff.rs/docs/rules/pytest-raises-too-broad/
  "PLR0124", # https://beta.ruff.rs/docs/rules/comparison-with-itself/
  "PLR0133", # https://beta.ruff.rs/docs/rules/comparison-of-constant/
  "PLR2004", # https://beta.ruff.rs/docs/settings/#pylint-allow-magic-value-types
  "S101",    # https://beta.ruff.rs/docs/rules/assert/
  "S105",    # https://beta.ruff.rs/docs/rules/hardcoded-password-string/
  "S106",    # https://beta.ruff.rs/docs/rules/hardcoded-password-func-arg/
  "S113",    # https://beta.ruff.rs/docs/rules/request-without-timeout/
  "S311",    # https://beta.ruff.rs/docs/rules/suspicious-non-cryptographic-random-usage/
  "S324",    # https://beta.ruff.rs/docs/rules/hashlib-insecure-hash-function/
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pylint]
max-args = 10
